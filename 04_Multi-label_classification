{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9322219,"sourceType":"datasetVersion","datasetId":5647018}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## Chapter 4: Multi-label classification\n\nIn Chapter 3, we dealt with a situation where a single input will predict only one unique class in a set of multiple available class.\n\nIn this chapter, we shall deal with a multi-lable classification problem. This involves situation where a single input can be assigned to more than one class. A concrete example of this is reflected in the classification of films, books, music, etc. Here, given details of a single piece of film, the classifier will be able to indicate if it is **Action, Adventure and Drama**. Simply, in this kind of problem, each sample can have all, none or a subset of the available class.\n\nThere are two differences between the model in this chapter and that in Chapter 3.\n\n1. **Binary cross-entropy** is used as the loss function\n2. We are also going to employ the ***sigmoid*** activation function here because we no longer care about th summing the probabilities.\n3. Here also, we introduce the use of **validation_split and validation_data parameters** under the .fit() method\n\n- ","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19"}},{"cell_type":"markdown","source":"Problem statement:\n> Here we are going to automate the watering of farm parcels by making an intelligent irrigation machine. Since this is a multi-lable problems, the labels are not mutually exclusive. Which means, you could water all parcel based on sensor reading, none or any combination of farm parcels based on the inputs.\n\nConsider that our input is reading from 20 sensors placed on the parcels to read different environmental signals (PH, nutrient, water, etc). \n","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom keras.api.models import Sequential\nfrom keras.api.layers import Dense, InputLayer\nfrom keras.api.utils import set_random_seed\n\nfrom sklearn.model_selection import train_test_split\n\nset_random_seed(134)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:25:50.112151Z","iopub.execute_input":"2024-09-06T02:25:50.112899Z","iopub.status.idle":"2024-09-06T02:25:50.121730Z","shell.execute_reply.started":"2024-09-06T02:25:50.112829Z","shell.execute_reply":"2024-09-06T02:25:50.120319Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"## **Data importation, description, and splitting etc**","metadata":{}},{"cell_type":"code","source":"## Import the data\nsensor_irrig = pd.read_csv(\"/kaggle/input/sensor-irrigation-data/sensors_irrigation.csv\")\nprint(sensor_irrig.info())                         # This shows that all columns store integer data\n#print(sensor_irrig.median(numeric_only=True))     \n\n\n## Split the data into into input and output\nsensor_data = sensor_irrig.drop([\"parcel_0\", \"parcel_1\", \"parcel_2\"], axis = 1).values\nparcels = sensor_irrig[[\"parcel_0\", \"parcel_1\", \"parcel_2\"]].values\n#print(sensor_data)\n#print(parcels)\n\n## Split the data into X_train, y_train, X_test, y_test\nX_train, X_test, y_train, y_test = train_test_split(sensor_data, parcels, test_size=0.3)\nprint(X_train.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:32:23.403829Z","iopub.execute_input":"2024-09-06T02:32:23.405102Z","iopub.status.idle":"2024-09-06T02:32:23.470716Z","shell.execute_reply.started":"2024-09-06T02:32:23.405048Z","shell.execute_reply":"2024-09-06T02:32:23.469241Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2000 entries, 0 to 1999\nData columns (total 23 columns):\n #   Column     Non-Null Count  Dtype\n---  ------     --------------  -----\n 0   sensor_0   2000 non-null   int64\n 1   sensor_1   2000 non-null   int64\n 2   sensor_2   2000 non-null   int64\n 3   sensor_3   2000 non-null   int64\n 4   sensor_4   2000 non-null   int64\n 5   sensor_5   2000 non-null   int64\n 6   sensor_6   2000 non-null   int64\n 7   sensor_7   2000 non-null   int64\n 8   sensor_8   2000 non-null   int64\n 9   sensor_9   2000 non-null   int64\n 10  sensor_10  2000 non-null   int64\n 11  sensor_11  2000 non-null   int64\n 12  sensor_12  2000 non-null   int64\n 13  sensor_13  2000 non-null   int64\n 14  sensor_14  2000 non-null   int64\n 15  sensor_15  2000 non-null   int64\n 16  sensor_16  2000 non-null   int64\n 17  sensor_17  2000 non-null   int64\n 18  sensor_18  2000 non-null   int64\n 19  sensor_19  2000 non-null   int64\n 20  parcel_0   2000 non-null   int64\n 21  parcel_1   2000 non-null   int64\n 22  parcel_2   2000 non-null   int64\ndtypes: int64(23)\nmemory usage: 359.5 KB\nNone\n(1400, 20)\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## **Define the model's architecture**","metadata":{}},{"cell_type":"code","source":"model = Sequential()\nmodel.add(InputLayer(shape = (20,)))\nmodel.add(Dense(70, activation = \"relu\"))\nmodel.add(Dense(3, activation = \"sigmoid\"))\n\nmodel.summary()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:32:28.669197Z","iopub.execute_input":"2024-09-06T02:32:28.669659Z","iopub.status.idle":"2024-09-06T02:32:28.721118Z","shell.execute_reply.started":"2024-09-06T02:32:28.669618Z","shell.execute_reply":"2024-09-06T02:32:28.719841Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m70\u001b[0m)             │         \u001b[38;5;34m1,470\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │           \u001b[38;5;34m213\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">70</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,470</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">213</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,683\u001b[0m (6.57 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,683</span> (6.57 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,683\u001b[0m (6.57 KB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,683</span> (6.57 KB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"## **Compile the model**\n","metadata":{}},{"cell_type":"code","source":"# Compile your model with binary crossentropy loss\nmodel.compile(optimizer='adam',\n           loss = \"binary_crossentropy\",\n           metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:26:19.808841Z","iopub.execute_input":"2024-09-06T02:26:19.809336Z","iopub.status.idle":"2024-09-06T02:26:19.830000Z","shell.execute_reply.started":"2024-09-06T02:26:19.809292Z","shell.execute_reply":"2024-09-06T02:26:19.828449Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":"## **Train the model (fitting with validation_split)**\n**NOTE**: We used a validation split of 0.2 here","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"model_fit = model.fit(X_train, y_train, epochs = 100, \n                      validation_split= 0.2, verbose = False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-05T06:11:29.892472Z","iopub.execute_input":"2024-09-05T06:11:29.893527Z","iopub.status.idle":"2024-09-05T06:11:42.815187Z","shell.execute_reply.started":"2024-09-05T06:11:29.893470Z","shell.execute_reply":"2024-09-05T06:11:42.813807Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"print(model_fit.history.keys())","metadata":{"execution":{"iopub.status.busy":"2024-09-05T06:13:53.048278Z","iopub.execute_input":"2024-09-05T06:13:53.048937Z","iopub.status.idle":"2024-09-05T06:13:53.057012Z","shell.execute_reply.started":"2024-09-05T06:13:53.048876Z","shell.execute_reply":"2024-09-05T06:13:53.055465Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"dict_keys(['accuracy', 'loss', 'val_accuracy', 'val_loss'])\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict on sensors_test and round up the predictions\npreds = model.predict(X_test)\npreds_rounded = np.round(preds)\nprint(preds[:10])\nprint(preds_rounded[:10])","metadata":{"execution":{"iopub.status.busy":"2024-09-05T06:13:55.646741Z","iopub.execute_input":"2024-09-05T06:13:55.647310Z","iopub.status.idle":"2024-09-05T06:13:55.873763Z","shell.execute_reply.started":"2024-09-05T06:13:55.647258Z","shell.execute_reply":"2024-09-05T06:13:55.872265Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n[[1.6433962e-03 9.9999338e-01 1.3004694e-03]\n [9.9950349e-01 1.2954034e-01 3.1725675e-04]\n [2.8553514e-03 1.8553432e-03 7.4736500e-04]\n [9.9986744e-01 4.5399702e-01 5.4358221e-03]\n [2.7072087e-03 2.9575387e-03 7.0947292e-04]\n [4.4911895e-03 9.9995041e-01 1.4426793e-05]\n [2.0063885e-04 1.0000000e+00 1.1168992e-06]\n [9.9952686e-01 8.8986343e-01 9.8656083e-04]\n [9.9964416e-01 9.8603839e-01 8.7472054e-06]\n [9.9726063e-01 9.1059309e-01 1.6288699e-04]]\n[[0. 1. 0.]\n [1. 0. 0.]\n [0. 0. 0.]\n [1. 0. 0.]\n [0. 0. 0.]\n [0. 1. 0.]\n [0. 1. 0.]\n [1. 1. 0.]\n [1. 1. 0.]\n [1. 1. 0.]]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## **Evaluation**","metadata":{}},{"cell_type":"code","source":"# We can no evaluate our model's accuracy on the test data\naccuracy = model.evaluate(X_test, y_test)\nprint(accuracy)\n\n# Print accuracy\nprint('Accuracy:', accuracy)","metadata":{"execution":{"iopub.status.busy":"2024-09-05T06:14:07.194647Z","iopub.execute_input":"2024-09-05T06:14:07.195181Z","iopub.status.idle":"2024-09-05T06:14:07.332032Z","shell.execute_reply.started":"2024-09-05T06:14:07.195131Z","shell.execute_reply":"2024-09-05T06:14:07.330585Z"},"trusted":true},"execution_count":27,"outputs":[{"name":"stdout","text":"\u001b[1m19/19\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6186 - loss: 0.2332 \n[0.25230979919433594, 0.6116666793823242]\nAccuracy: [0.25230979919433594, 0.6116666793823242]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## **Introducing callbacks**","metadata":{}},{"cell_type":"markdown","source":"In general, call backs help us to monitor or control model's training. Callbacks are functions are executed after some other function(s), events(s) or task(s) have already finished. There are three kinds of callbacks in kers:\n- History (This store metrics as the training progresses. This can then be called after the training)\n- ModelCheckpoint\n- EarlyStopping (This is used to make decision to stop or continue a training after a specific epoch).\n    - It is most commonly employed to stop the model when overfitting is detected or when the model no longer improves as it trains (essentially when the training curve for the validation data flattens). \n    - It is an extremely useful feature since neural network can take long to train and we have no idea how many epochs will be needed beforehand to train the model. So, this allows us to start with a high epoch and then use Earlystopping to stop the model.\n    - It can be imported as: from keras.api.callbacks import EarlyStopping\n    - EarlyStopping can be used to monitor several metrics (validation accuracy, validation loss, validation mse, validation mae, etc). Here is how to use it\n>    early_stopping = EarlyStopping(monitor = \"val_loss\", patience = 5) \n>    \nmodel.fit(X_train, y_train, epochs = 20, validation_data = (X_test, y_test), callbacks = [early_stopping]\n    - Patience is the number of epochs to wait for the model to improve before the training is stopped. While there is no fixed rule on what number to use for patience, it is generally a great practice to specify a reasonable number to avoid pre-mature interruption.\n    \n    ","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"markdown","source":"-------------------------------------------------------------------------","metadata":{}},{"cell_type":"markdown","source":"# **Model training (fitting with validation_data to obtain the training curves)**","metadata":{}},{"cell_type":"code","source":"# Compile your model with binary crossentropy loss\nmodel.compile(optimizer='adam',\n           loss = \"binary_crossentropy\",\n           metrics=['accuracy'])","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:32:51.700165Z","iopub.execute_input":"2024-09-06T02:32:51.700707Z","iopub.status.idle":"2024-09-06T02:32:51.713842Z","shell.execute_reply.started":"2024-09-06T02:32:51.700657Z","shell.execute_reply":"2024-09-06T02:32:51.712638Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"### Training curves for the loss and accuracy\n\n## NOTE: Our test data is now used for validation in order to obtain the curves\nmodel_hist = model.fit(X_train, y_train, \n                       validation_data = (X_test, y_test), \n                      epochs = 100)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:33:04.509028Z","iopub.execute_input":"2024-09-06T02:33:04.509514Z","iopub.status.idle":"2024-09-06T02:33:21.531291Z","shell.execute_reply.started":"2024-09-06T02:33:04.509471Z","shell.execute_reply":"2024-09-06T02:33:21.529900Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step - accuracy: 0.3130 - loss: 0.8519 - val_accuracy: 0.5800 - val_loss: 0.5143\nEpoch 2/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5797 - loss: 0.5057 - val_accuracy: 0.5733 - val_loss: 0.4102\nEpoch 3/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5770 - loss: 0.4109 - val_accuracy: 0.5633 - val_loss: 0.3607\nEpoch 4/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5716 - loss: 0.3638 - val_accuracy: 0.5667 - val_loss: 0.3333\nEpoch 5/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5889 - loss: 0.3363 - val_accuracy: 0.5700 - val_loss: 0.3164\nEpoch 6/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5952 - loss: 0.3184 - val_accuracy: 0.5700 - val_loss: 0.3046\nEpoch 7/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6032 - loss: 0.3049 - val_accuracy: 0.5750 - val_loss: 0.2954\nEpoch 8/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6082 - loss: 0.2946 - val_accuracy: 0.5717 - val_loss: 0.2878\nEpoch 9/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6077 - loss: 0.2858 - val_accuracy: 0.5733 - val_loss: 0.2806\nEpoch 10/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6103 - loss: 0.2777 - val_accuracy: 0.5783 - val_loss: 0.2743\nEpoch 11/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6090 - loss: 0.2701 - val_accuracy: 0.5800 - val_loss: 0.2672\nEpoch 12/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6096 - loss: 0.2621 - val_accuracy: 0.5817 - val_loss: 0.2609\nEpoch 13/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6130 - loss: 0.2551 - val_accuracy: 0.5817 - val_loss: 0.2555\nEpoch 14/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6122 - loss: 0.2487 - val_accuracy: 0.5717 - val_loss: 0.2507\nEpoch 15/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6096 - loss: 0.2430 - val_accuracy: 0.5767 - val_loss: 0.2469\nEpoch 16/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6082 - loss: 0.2380 - val_accuracy: 0.5717 - val_loss: 0.2435\nEpoch 17/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6051 - loss: 0.2334 - val_accuracy: 0.5700 - val_loss: 0.2405\nEpoch 18/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6073 - loss: 0.2293 - val_accuracy: 0.5733 - val_loss: 0.2379\nEpoch 19/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6061 - loss: 0.2256 - val_accuracy: 0.5767 - val_loss: 0.2357\nEpoch 20/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6032 - loss: 0.2222 - val_accuracy: 0.5750 - val_loss: 0.2339\nEpoch 21/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6024 - loss: 0.2190 - val_accuracy: 0.5800 - val_loss: 0.2324\nEpoch 22/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6024 - loss: 0.2163 - val_accuracy: 0.5867 - val_loss: 0.2309\nEpoch 23/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6051 - loss: 0.2135 - val_accuracy: 0.5850 - val_loss: 0.2299\nEpoch 24/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6044 - loss: 0.2112 - val_accuracy: 0.5883 - val_loss: 0.2291\nEpoch 25/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6042 - loss: 0.2089 - val_accuracy: 0.5917 - val_loss: 0.2284\nEpoch 26/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6012 - loss: 0.2071 - val_accuracy: 0.5917 - val_loss: 0.2279\nEpoch 27/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6004 - loss: 0.2052 - val_accuracy: 0.5933 - val_loss: 0.2274\nEpoch 28/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5934 - loss: 0.2033 - val_accuracy: 0.5950 - val_loss: 0.2264\nEpoch 29/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5957 - loss: 0.2014 - val_accuracy: 0.5883 - val_loss: 0.2261\nEpoch 30/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5907 - loss: 0.1999 - val_accuracy: 0.5900 - val_loss: 0.2258\nEpoch 31/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5927 - loss: 0.1983 - val_accuracy: 0.5900 - val_loss: 0.2257\nEpoch 32/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5915 - loss: 0.1969 - val_accuracy: 0.5917 - val_loss: 0.2251\nEpoch 33/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5896 - loss: 0.1952 - val_accuracy: 0.5900 - val_loss: 0.2252\nEpoch 34/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5877 - loss: 0.1939 - val_accuracy: 0.6000 - val_loss: 0.2247\nEpoch 35/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5891 - loss: 0.1921 - val_accuracy: 0.6000 - val_loss: 0.2247\nEpoch 36/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5916 - loss: 0.1907 - val_accuracy: 0.5983 - val_loss: 0.2245\nEpoch 37/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5945 - loss: 0.1895 - val_accuracy: 0.6000 - val_loss: 0.2246\nEpoch 38/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5947 - loss: 0.1881 - val_accuracy: 0.6000 - val_loss: 0.2245\nEpoch 39/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5942 - loss: 0.1867 - val_accuracy: 0.6067 - val_loss: 0.2244\nEpoch 40/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5947 - loss: 0.1852 - val_accuracy: 0.6033 - val_loss: 0.2244\nEpoch 41/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5909 - loss: 0.1839 - val_accuracy: 0.6033 - val_loss: 0.2244\nEpoch 42/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5913 - loss: 0.1827 - val_accuracy: 0.6017 - val_loss: 0.2243\nEpoch 43/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5911 - loss: 0.1811 - val_accuracy: 0.6017 - val_loss: 0.2244\nEpoch 44/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5961 - loss: 0.1802 - val_accuracy: 0.6017 - val_loss: 0.2246\nEpoch 45/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5921 - loss: 0.1790 - val_accuracy: 0.6000 - val_loss: 0.2245\nEpoch 46/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5928 - loss: 0.1778 - val_accuracy: 0.6033 - val_loss: 0.2245\nEpoch 47/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5899 - loss: 0.1765 - val_accuracy: 0.6033 - val_loss: 0.2246\nEpoch 48/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5903 - loss: 0.1754 - val_accuracy: 0.6050 - val_loss: 0.2247\nEpoch 49/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5919 - loss: 0.1744 - val_accuracy: 0.6017 - val_loss: 0.2250\nEpoch 50/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5931 - loss: 0.1733 - val_accuracy: 0.6033 - val_loss: 0.2255\nEpoch 51/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5936 - loss: 0.1721 - val_accuracy: 0.6033 - val_loss: 0.2253\nEpoch 52/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5890 - loss: 0.1712 - val_accuracy: 0.6067 - val_loss: 0.2256\nEpoch 53/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5910 - loss: 0.1700 - val_accuracy: 0.6000 - val_loss: 0.2260\nEpoch 54/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5884 - loss: 0.1691 - val_accuracy: 0.6050 - val_loss: 0.2261\nEpoch 55/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5908 - loss: 0.1680 - val_accuracy: 0.6033 - val_loss: 0.2262\nEpoch 56/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5927 - loss: 0.1670 - val_accuracy: 0.6000 - val_loss: 0.2265\nEpoch 57/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5913 - loss: 0.1659 - val_accuracy: 0.6050 - val_loss: 0.2265\nEpoch 58/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.5959 - loss: 0.1648 - val_accuracy: 0.6033 - val_loss: 0.2270\nEpoch 59/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5972 - loss: 0.1637 - val_accuracy: 0.5967 - val_loss: 0.2275\nEpoch 60/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5932 - loss: 0.1629 - val_accuracy: 0.6033 - val_loss: 0.2277\nEpoch 61/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5966 - loss: 0.1615 - val_accuracy: 0.6000 - val_loss: 0.2284\nEpoch 62/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5999 - loss: 0.1606 - val_accuracy: 0.6000 - val_loss: 0.2287\nEpoch 63/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5961 - loss: 0.1598 - val_accuracy: 0.6017 - val_loss: 0.2292\nEpoch 64/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5998 - loss: 0.1587 - val_accuracy: 0.6017 - val_loss: 0.2287\nEpoch 65/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5991 - loss: 0.1577 - val_accuracy: 0.6000 - val_loss: 0.2294\nEpoch 66/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6019 - loss: 0.1566 - val_accuracy: 0.6067 - val_loss: 0.2302\nEpoch 67/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6004 - loss: 0.1558 - val_accuracy: 0.6033 - val_loss: 0.2302\nEpoch 68/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5973 - loss: 0.1548 - val_accuracy: 0.6000 - val_loss: 0.2302\nEpoch 69/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6004 - loss: 0.1542 - val_accuracy: 0.6000 - val_loss: 0.2302\nEpoch 70/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6020 - loss: 0.1531 - val_accuracy: 0.5967 - val_loss: 0.2313\nEpoch 71/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6045 - loss: 0.1523 - val_accuracy: 0.5983 - val_loss: 0.2314\nEpoch 72/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6006 - loss: 0.1510 - val_accuracy: 0.5950 - val_loss: 0.2321\nEpoch 73/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.5970 - loss: 0.1503 - val_accuracy: 0.6033 - val_loss: 0.2323\nEpoch 74/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6057 - loss: 0.1491 - val_accuracy: 0.5983 - val_loss: 0.2331\nEpoch 75/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6052 - loss: 0.1483 - val_accuracy: 0.6000 - val_loss: 0.2333\nEpoch 76/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6016 - loss: 0.1476 - val_accuracy: 0.5950 - val_loss: 0.2334\nEpoch 77/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6031 - loss: 0.1466 - val_accuracy: 0.5967 - val_loss: 0.2339\nEpoch 78/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6022 - loss: 0.1456 - val_accuracy: 0.5933 - val_loss: 0.2343\nEpoch 79/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6006 - loss: 0.1451 - val_accuracy: 0.5917 - val_loss: 0.2350\nEpoch 80/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6008 - loss: 0.1441 - val_accuracy: 0.5900 - val_loss: 0.2352\nEpoch 81/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6027 - loss: 0.1433 - val_accuracy: 0.5883 - val_loss: 0.2361\nEpoch 82/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6022 - loss: 0.1426 - val_accuracy: 0.5917 - val_loss: 0.2358\nEpoch 83/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6036 - loss: 0.1414 - val_accuracy: 0.5900 - val_loss: 0.2368\nEpoch 84/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6007 - loss: 0.1406 - val_accuracy: 0.5883 - val_loss: 0.2370\nEpoch 85/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6007 - loss: 0.1399 - val_accuracy: 0.5850 - val_loss: 0.2379\nEpoch 86/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6017 - loss: 0.1393 - val_accuracy: 0.5833 - val_loss: 0.2384\nEpoch 87/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6033 - loss: 0.1389 - val_accuracy: 0.5833 - val_loss: 0.2383\nEpoch 88/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6039 - loss: 0.1372 - val_accuracy: 0.5883 - val_loss: 0.2389\nEpoch 89/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6056 - loss: 0.1368 - val_accuracy: 0.5850 - val_loss: 0.2395\nEpoch 90/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6049 - loss: 0.1357 - val_accuracy: 0.5850 - val_loss: 0.2403\nEpoch 91/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6079 - loss: 0.1350 - val_accuracy: 0.5867 - val_loss: 0.2408\nEpoch 92/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6087 - loss: 0.1342 - val_accuracy: 0.5850 - val_loss: 0.2417\nEpoch 93/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6088 - loss: 0.1335 - val_accuracy: 0.5917 - val_loss: 0.2415\nEpoch 94/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6081 - loss: 0.1326 - val_accuracy: 0.5883 - val_loss: 0.2419\nEpoch 95/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6058 - loss: 0.1317 - val_accuracy: 0.5950 - val_loss: 0.2422\nEpoch 96/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6078 - loss: 0.1306 - val_accuracy: 0.5900 - val_loss: 0.2419\nEpoch 97/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6024 - loss: 0.1305 - val_accuracy: 0.5933 - val_loss: 0.2423\nEpoch 98/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6061 - loss: 0.1293 - val_accuracy: 0.5900 - val_loss: 0.2435\nEpoch 99/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6025 - loss: 0.1285 - val_accuracy: 0.5917 - val_loss: 0.2443\nEpoch 100/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6045 - loss: 0.1278 - val_accuracy: 0.5950 - val_loss: 0.2456\n","output_type":"stream"}]},{"cell_type":"code","source":"print(model_hist.history.keys())\ntrain_acc = model_hist.history[\"accuracy\"]\ntest_acc = model_hist.history[\"val_accuracy\"]\ndf = pd.DataFrame(model_hist.history)\nprint(df.head())\ndf.plot()","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:40:36.625580Z","iopub.execute_input":"2024-09-06T02:40:36.626946Z","iopub.status.idle":"2024-09-06T02:40:37.050617Z","shell.execute_reply.started":"2024-09-06T02:40:36.626877Z","shell.execute_reply":"2024-09-06T02:40:37.049522Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"dict_keys(['accuracy', 'loss', 'val_accuracy', 'val_loss'])\n   accuracy      loss  val_accuracy  val_loss\n0  0.437857  0.687227      0.580000  0.514334\n1  0.600000  0.467145      0.573333  0.410200\n2  0.615714  0.387138      0.563333  0.360710\n3  0.615000  0.346137      0.566667  0.333283\n4  0.620000  0.321646      0.570000  0.316356\n","output_type":"stream"},{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"-----------------------------------------------------------------------------","metadata":{}},{"cell_type":"markdown","source":"## **Evaluation of Models with Callbacks**","metadata":{}},{"cell_type":"code","source":"## Import the necessary functions\nfrom keras.api.callbacks import EarlyStopping, ModelCheckpoint\n\n## Instantiate the earlystoping\nmonitor_val_loss = EarlyStopping(monitor = \"val_loss\", patience = 5)\n\n# Note: We can also monitor val_accuracy\n\n## Instantiate model checkpoint and save the best model\n\n\nmodel_save = ModelCheckpoint(\"best_classification_model.keras\", \n                             monitor = \"val_loss\",\n                             save_best_only=True)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:52:52.142602Z","iopub.execute_input":"2024-09-06T02:52:52.143663Z","iopub.status.idle":"2024-09-06T02:52:52.149604Z","shell.execute_reply.started":"2024-09-06T02:52:52.143611Z","shell.execute_reply":"2024-09-06T02:52:52.148319Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":"**NOTE**: \n- *Above, under the .fit() function, setting the \"best_classification_model = True\" helps to ensure that only the latest model according to the monitor parameter is saved/not over-written*\n- *Also, Previously, we have to save the model as .hdf5 extension in Keras 3, we must save as .keras*","metadata":{}},{"cell_type":"code","source":"model_hist_callbacks = model.fit(X_train, y_train, epochs = 100, \n                                 validation_data =(X_test, y_test),\n                                 callbacks=[monitor_val_loss, model_save])","metadata":{"execution":{"iopub.status.busy":"2024-09-06T02:53:02.312330Z","iopub.execute_input":"2024-09-06T02:53:02.313237Z","iopub.status.idle":"2024-09-06T02:53:03.288043Z","shell.execute_reply.started":"2024-09-06T02:53:02.313191Z","shell.execute_reply":"2024-09-06T02:53:03.286967Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"Epoch 1/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - accuracy: 0.6045 - loss: 0.1272 - val_accuracy: 0.5917 - val_loss: 0.2461\nEpoch 2/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6033 - loss: 0.1263 - val_accuracy: 0.5900 - val_loss: 0.2467\nEpoch 3/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6058 - loss: 0.1258 - val_accuracy: 0.5917 - val_loss: 0.2469\nEpoch 4/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.6070 - loss: 0.1248 - val_accuracy: 0.6000 - val_loss: 0.2480\nEpoch 5/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6087 - loss: 0.1239 - val_accuracy: 0.5950 - val_loss: 0.2473\nEpoch 6/100\n\u001b[1m44/44\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - accuracy: 0.6053 - loss: 0.1234 - val_accuracy: 0.6033 - val_loss: 0.2483\n","output_type":"stream"}]}]}