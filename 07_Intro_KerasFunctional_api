{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9290590,"sourceType":"datasetVersion","datasetId":5624455}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## **The Input layer**","metadata":{}},{"cell_type":"markdown","source":"The first step in creating a neural network model is to define the Input layer. This layer takes in raw data, usually in the form of numpy arrays. The shape of the Input layer defines how many variables your neural network will use. For example, if the input data has 10 columns, you define an Input layer with a shape of (10,)","metadata":{}},{"cell_type":"code","source":"from keras.api.layers import Input, InputLayer, Dense\n\n# Create an input layer of shape 1\ninput_tensor = Input(shape=(1,))","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:04:35.677403Z","iopub.execute_input":"2024-08-31T21:04:35.678988Z","iopub.status.idle":"2024-08-31T21:04:53.094581Z","shell.execute_reply.started":"2024-08-31T21:04:35.678909Z","shell.execute_reply":"2024-08-31T21:04:53.092840Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"## **The output layer or the Dense layer(s)**\n\nOnce you have an Input layer, the next step is to add a Dense layer.\n\nDense layers learn a weight matrix, where the first dimension of the matrix is the dimension of the input data, and the second dimension is the dimension of the output data. Recall that your Input layer has a shape of 1. In this case, your output layer will also have a shape of 1. This means that the Dense layer will learn a 1x1 weight matrix.","metadata":{}},{"cell_type":"code","source":"# Dense layer\noutput_function = Dense(1)\n\n\noutput_tensor = output_function(input_tensor)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:07:28.524902Z","iopub.execute_input":"2024-08-31T21:07:28.527321Z","iopub.status.idle":"2024-08-31T21:07:28.621464Z","shell.execute_reply.started":"2024-08-31T21:07:28.527241Z","shell.execute_reply":"2024-08-31T21:07:28.620125Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# We can also create the output layer and output tensor in one shot as shown below\noutput_tensor = Dense(1)(input_tensor)","metadata":{"execution":{"iopub.status.busy":"2024-08-30T10:05:23.655538Z","iopub.execute_input":"2024-08-30T10:05:23.655954Z","iopub.status.idle":"2024-08-30T10:05:23.672239Z","shell.execute_reply.started":"2024-08-30T10:05:23.655916Z","shell.execute_reply":"2024-08-30T10:05:23.670607Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":"## **Build the model**\n*- To build a model, simply import the Model class and wrap the input and output layers around it. *","metadata":{}},{"cell_type":"code","source":"from keras.api.models import Model\n\nmodel = Model(input_tensor, output_tensor)\nprint(model)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:07:49.949004Z","iopub.execute_input":"2024-08-31T21:07:49.949538Z","iopub.status.idle":"2024-08-31T21:07:49.965593Z","shell.execute_reply.started":"2024-08-31T21:07:49.949462Z","shell.execute_reply":"2024-08-31T21:07:49.963791Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<Functional name=functional_1, built=True>\n","output_type":"stream"}]},{"cell_type":"markdown","source":"***Note**: If you are working with multiple input and multiple output, you must pass a list of input and output to the Model function*","metadata":{}},{"cell_type":"markdown","source":"# **Compile the model**\n    - This is where we define the loss, the optimizer and the metrics","metadata":{}},{"cell_type":"code","source":"model.compile(loss = \"mse\", optimizer=\"adam\", metrics = [\"mae\"])\n\n# Summarize the model\nprint(model.summary())","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:07:55.220861Z","iopub.execute_input":"2024-08-31T21:07:55.221305Z","iopub.status.idle":"2024-08-31T21:07:55.262840Z","shell.execute_reply.started":"2024-08-31T21:07:55.221265Z","shell.execute_reply":"2024-08-31T21:07:55.260994Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"functional_1\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_1\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m2\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2\u001b[0m (8.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (8.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m2\u001b[0m (8.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2</span> (8.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"name":"stdout","text":"None\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Note: The model we have built here is equivalent to typical linear regression expressed as:\n$$y = mx + b$$\n\nwhere m = a single weight of the Dense layer (since we only passed a single input to it), while b is the intercept (or bias)","metadata":{}},{"cell_type":"markdown","source":"## **Compiling and plotting the model**","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"from keras.utils import plot_model\ninput_tensor = Input(shape = (1,))\noutput_tensor = Dense(1, name = \"Output-Layer\")(input_tensor)\nmodel = Model(input_tensor, output_tensor)\nmodel.compile(loss = \"mse\", optimizer = \"Adam\", metrics = [\"mae\"])\n\n# Save an image of the model\nplot_model(model, to_file='model.png')","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:08:02.324953Z","iopub.execute_input":"2024-08-31T21:08:02.326212Z","iopub.status.idle":"2024-08-31T21:08:02.681409Z","shell.execute_reply.started":"2024-08-31T21:08:02.326145Z","shell.execute_reply":"2024-08-31T21:08:02.680113Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAW0AAAF9CAYAAADP1zm5AAAABmJLR0QA/wD/AP+gvaeTAAAgAElEQVR4nO3deXwV5aH/8e9JQhbIQiBwAwZFkCUgwbLdIEsjiwJViqglIFy0LBewFapceSleWqTailR5KUi9VAHFcLWASwWkBAsiRJQqkUUoSyJhlSWEJJCQkPn94Q8ukjNzliScPMnn/XrNH5xnnuWcHL6ZPDPzjMuyLEsAACMEBXoAAADvEdoAYBBCGwAMQmgDgEEIbQAwCKENAAYhtAHAIIQ2ABiE0AYAgxDaAGCQEG922rBhg0aOHFnVYwGAWmvcuHH67W9/63E/r0K7qKhIR44cqfCgAADunT171qv9mB4BAIMQ2gBgEEIbAAxCaAOAQQhtADAIoQ0ABiG0AcAghDYAGITQBgCDENoAYBBCGwAMQmgDgEEIbQAwCKENAAYhtAHAIIQ2ABiE0AYAgxDaAGAQQhsADEJoA4BBCG0AMAihDQAGIbQBwCCENgAYhNAGAIMQ2gBgEEIbAAxCaAOAQQhtADAIoQ0ABiG0AcAghDYAGITQBgCDENoAYBBCGwAMQmgDgEEIbQAwCKENAAYhtAHAIIQ2ABiE0AYAgxDaAGAQQhsADFKjQvujjz6SZVm229y5cwM9RFwnU6dOdfwubN++PdBDBPxSo0Ib5tqzZ49twO7ZsyfQwwOqDUIbAAxCaAOAQQhtADAIoQ0ABiG0AcAgIYEegMnatWunBx98UP369VOzZs3UsGFD5ebmKjs7W3//+9+1aNEiZWVlVUnfLVu21IgRIzRgwAA1a9ZMjRs31tmzZ5WTk6O1a9cqLS1Nu3fvrpK+4Z7L5dINN9yg1q1bX9latWqlJk2aKC4uTvXr11dYWJhCQ0N14cIF5efnKy8vT3v37lVmZqY2b96s9PR0Xbp0KdBvxS/x8fHq16+fevXqpc6dOysuLk4NGjRQWFiYTp06pZMnT2r79u1KT0/Xxx9/rFOnTlXZWOLi4jR27FgNGjRIiYmJql+/vs6dO6fVq1dr1KhRVdbvdWF5Yc2aNZakar999NFHju9j7ty5jvXvvvtux/pjx461JFnx8fHWypUrPX5uRUVF1owZM7wae2RkpGNbS5cutSRZ0dHR1qJFi6yysjLH/cvKyqz58+db0dHRHvuuX7++Y1vLly/32MbcuXMd22jevPmP9l++fLnj/r74/PPPy41n6tSpjnW2b99e6d+/lJSUCr+XI0eOWE8//bQVGhpq288zzzzj2EZSUpLXY05OTnZs6/HHH/fYRvv27a3FixdbFy9e9Pp9FhYWWi+88IIVFxdXqf8/JFljx4618vPz3e5XFT/3ytqmTJni1WfH9IiPunbtqszMTN17770e9w0LC9PMmTP18ssvV0rfN954o7788ks99NBDcrlcjvu6XC5NmjRJn332meLi4iqlf1S9pk2batasWdq2bZtatGjhdp8FCxaopKTEto3x48d73d8vfvEL27LS0lItXbrUttzlcmnq1Knavn27Ro8erTp16njdb926dTV16lTt2rVLPXr08LqeJzNnztTChQsVGRnpttzT/xsTENo+6Ny5s9avX6/GjRv7VO/Xv/617rnnngr13bBhQ6Wnp6t169Y+1evQoYM++eQT1a1b1+++Lcvyuy7806FDB61atUr169cvV3bs2DGtWLHCtu7IkSMVERHhsQ+Xy6X777/ftnz16tU6ceKE27KgoCAtW7ZML7zwgkJC/J9lbdy4sT755BPHcXhr5MiRmjFjRoXbqe4IbR9MmDBBUVFRftV9/vnnK9T3gAED1KpVK7/qdujQQX/84x/97pvQDoy2bdvqueeec1vm9NdbTEyM4xH0ZbfffruaNWtmW7548WLbshdeeEHDhg3z2Ic3QkNDtWTJEiUlJfndRtOmTTVv3jyP+3GkDa8lJiYqOTk5YP3/6le/UqdOnfyqS2j77uDBg3r55Zc1evRode7cWU2aNFFkZKRCQkIUFRWlNm3aaMSIEVq1apVjO7/85S/VpEmTcq9nZGRo27ZttvW8mSJxCvZTp07po48+cls2cOBAPfbYY45tL1u2TL1791ZMTIwiIiJ022236c9//rPtd6lu3br661//6vdR+x133KGYmBi/6pqG0PZDfn6+nnjiCbVo0ULh4eFq3bq1Xn31VY/1+vbtW+G+CwoK9N///d9q06aNwsPD1aBBAw0aNEiffvqpYz2Xy6XJkyf71WdZWZlf9Wqb0tJSvfPOO+ratatatmypyZMn680339RXX32l48ePq7CwUJcuXVJBQYH+9a9/admyZbr77rv1X//1X7ZthoWFafDgwW7LXnnlFdt6t99+u9q3b29bHhQU5DglsXTpUrfz5i6XS7///e9t60nSuHHjNGLECG3atEnnzp1TUVGRMjMzNXHiRE2cONG2XuvWrTVy5EjHtr1x4MABTZgwQS1btlRERITi4+OVnJysadOm6V//+leF2w84b85WcvXI/8nNzbU6dOjgtv78+fMd665YscLvs+OWZVn5+flWp06d3NYPCgqy0tLSHOsXFRW5vZrE09UjV5+Zt9t8vXrk2m3Pnj22dffs2ePzdyEQV4/4uwUFBVnHjx/3+fMPCwuzTpw4YVvP6fveu3dvx8+nY8eObuv169fPsd6SJUs8vt9169bZ1v/222/9/v9hWZb1wQcfWGFhYQH/mfqzcfVIFZk2bZp27NjhtszpyEeSEhISKtT3rFmz9NVXX7ktKysr08SJE3X69Gnb+mFhYX5N0XCkXbXKysp08OBB23K7ud7i4mL9z//8j229UaNGKTw83G2Z03z0119/rczMTLdlgwYNsq0nSX/6058cyyXp7bffti1r27atmjdv7rENd/bv36/U1FQVFxf7Vd8UhLYPzpw5o0WLFtmW7927VxcvXrQtr8icW2lpqf7yl7847pOXl6f//d//ddyne/fuPvdtMafts9DQUPXr109/+MMf9N5772nnzp06duyYzp07p0uXLpVbftbp59KgQQPbsgULFqi0tNS2nrspkKCgIN133322bTp9x52m+E6ePKlvvvnGtvwyT1MU/k4jzpo1SxcuXPCrrkm4I9IH6enpjtfHWpal3Nxc/du//Zvb8nr16vnd9+7du3XmzBmP+23ZskWPPPKIbfnNN9/sc9+EtvdiYmI0depUPfroo4qOjq6UNmNjY23Ljh49qpUrV9qeVBw/fny5a61TUlJsv6MXL15UWlqabX8tW7a0LWvUqFGlfFcSExN9rlNSUqLly5dXuG8TcKTtg507d3rcx+k3fUUuN/ruu++82i87O9ux3OmoDRWTmJiozMxMPf3005UW2NIP01pOnC7/69Wrl9q2bfuj15yuGvnwww9tp9jCwsIqdODhLX9uBtu9e7fOnz9fBaOpfghtH3hzpOt0JF4RhYWFXu3n6Yvr73XmngQHB1dJu6aIjY3VJ598optuuum6971582bbcx3SD1dzXBYcHKyhQ4fa7ut0bba7G32qQsOGDX2uk5OTUwUjqZ4IbR94c4Kjqk7aeXuE4+nOx/z8fJ/79uba2co8sjTRs88+q/j4+ID173QS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","text/plain":"<IPython.core.display.Image object>"},"metadata":{}}]},{"cell_type":"code","source":"import os\nos.getcwd()","metadata":{"execution":{"iopub.status.busy":"2024-08-30T10:50:35.391722Z","iopub.execute_input":"2024-08-30T10:50:35.392231Z","iopub.status.idle":"2024-08-30T10:50:35.400204Z","shell.execute_reply.started":"2024-08-30T10:50:35.392189Z","shell.execute_reply":"2024-08-30T10:50:35.398868Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"'/kaggle/working'"},"metadata":{}}]},{"cell_type":"markdown","source":"## **Display the image of the model with pyplot**","metadata":{}},{"cell_type":"code","source":"# Display the image\nimport matplotlib.pyplot as plt\ndata = plt.imread('/kaggle/working/model.png')\nplt.imshow(data)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:08:41.355140Z","iopub.execute_input":"2024-08-31T21:08:41.355664Z","iopub.status.idle":"2024-08-31T21:08:41.713348Z","shell.execute_reply.started":"2024-08-31T21:08:41.355617Z","shell.execute_reply":"2024-08-31T21:08:41.711628Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"## **Fitting the model to a data**\n### *For the model below, the goal is to predict which team will win a tournament game*\n    - We will start by working with a single input, single output model\n    - Input data will be seed difference\n    - Output will be the score difference","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ngames_season = pd.read_csv(\"/kaggle/input/usgames-data/USgames_season_enriched.csv\")\nprint(games_season.head(4))\nprint(games_season.shape)\nX = games_season[\"seed_diff\"]\ny = games_season[\"score_diff\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, \n                                                    random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:31:01.276749Z","iopub.execute_input":"2024-08-31T21:31:01.277253Z","iopub.status.idle":"2024-08-31T21:31:01.319736Z","shell.execute_reply.started":"2024-08-31T21:31:01.277207Z","shell.execute_reply":"2024-08-31T21:31:01.318098Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"   season  team_1  team_2  home  seed_diff  score_diff  score_1  score_2  won  \\\n0    1985     288      73     0         -3          -9       41       50    0   \n1    1985    5929      73     0          4           6       61       55    1   \n2    1985    9884      73     0          5          -4       59       63    0   \n3    1985      73     288     0          3           9       50       41    1   \n\n       pred  \n0 -3.601452  \n1  0.474164  \n2 -0.414316  \n3  3.601452  \n(4234, 10)\n","output_type":"stream"}]},{"cell_type":"code","source":"print(games_season.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:53:09.849630Z","iopub.execute_input":"2024-08-31T21:53:09.850353Z","iopub.status.idle":"2024-08-31T21:53:09.866718Z","shell.execute_reply.started":"2024-08-31T21:53:09.850245Z","shell.execute_reply":"2024-08-31T21:53:09.864354Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"season        0\nteam_1        0\nteam_2        0\nhome          0\nseed_diff     0\nscore_diff    0\nscore_1       0\nscore_2       0\nwon           0\npred          0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"model.fit(X_train, y_train, epochs = 1,batch_size = 64,\n         validation_split = 0.2)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:31:13.699486Z","iopub.execute_input":"2024-08-31T21:31:13.700175Z","iopub.status.idle":"2024-08-31T21:31:14.029937Z","shell.execute_reply.started":"2024-08-31T21:31:13.700108Z","shell.execute_reply":"2024-08-31T21:31:14.028219Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"\u001b[1m43/43\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 5ms/step - loss: 238.7345 - mae: 12.2063 - val_loss: 203.5219 - val_mae: 11.3323\n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"<keras.src.callbacks.history.History at 0x7dc7a85acee0>"},"metadata":{}}]},{"cell_type":"markdown","source":"- If you are wondering why we got 43/43 above, it is simply because of the number of batch that we have used.\n\n- This is shown in the code chunk below","metadata":{}},{"cell_type":"code","source":"# This is how to determine the actual number of iterations based on our batch_size\n# The batch_size is simply the number of rows of data being used in each call of fit during training\nnrows = X_train.shape[0]\ntraining_size = nrows-(nrows*0.2)\nactual_batch = training_size/64\n\nprint(actual_batch)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:31:30.411946Z","iopub.execute_input":"2024-08-31T21:31:30.412452Z","iopub.status.idle":"2024-08-31T21:31:30.421326Z","shell.execute_reply.started":"2024-08-31T21:31:30.412409Z","shell.execute_reply":"2024-08-31T21:31:30.419560Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"42.3375\n","output_type":"stream"}]},{"cell_type":"code","source":"model.evaluate(X_test, y_test, verbose = True)","metadata":{"execution":{"iopub.status.busy":"2024-08-31T21:41:58.775017Z","iopub.execute_input":"2024-08-31T21:41:58.775582Z","iopub.status.idle":"2024-08-31T21:41:58.929712Z","shell.execute_reply.started":"2024-08-31T21:41:58.775538Z","shell.execute_reply":"2024-08-31T21:41:58.928183Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"\u001b[1m27/27\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 241.5386 - mae: 12.5521 \n","output_type":"stream"},{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"[224.54588317871094, 12.058597564697266]"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = model.predict(X_test)\n#print(y_pred)\n#print(y_test)\n#dict_dt = {\"y_test\": pd.Series(y_test), \"y_pred\":y_pred}\n#df = pd.DataFrame(dict_dt)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-31T22:00:14.451727Z","iopub.execute_input":"2024-08-31T22:00:14.452212Z","iopub.status.idle":"2024-08-31T22:00:14.613227Z","shell.execute_reply.started":"2024-08-31T22:00:14.452168Z","shell.execute_reply":"2024-08-31T22:00:14.611409Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"\u001b[1m27/27\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step \n","output_type":"stream"}]}]}